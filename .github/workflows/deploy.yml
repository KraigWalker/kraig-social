name: Deploy to Raspberry Pi

on:
  workflow_run:
    workflows: ["Build and Push Image to GitHub Container Registry"] # name of the first workflow
    types: [completed]

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Raspberry Pi
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
      - name: Install cloudflared
        run: |
          curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64.deb -o cloudflared.deb
          sudo dpkg -i cloudflared.deb

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_SSH_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ssh.kraig.social >> ~/.ssh/known_hosts

      - name: Run cloudflared Access SSH
        env:
          TUNNEL_HOSTNAME: "ssh.kraig.social"
          CLOUDFLARE_ACCESS_CLIENT_ID: ${{ secrets.CLOUDFLARE_ACCESS_CLIENT_ID }}
          CLOUDFLARE_ACCESS_CLIENT_SECRET: ${{ secrets.CLOUDFLARE_ACCESS_CLIENT_SECRET }}
        run: |
          # Non-interactive authentication:
          # cloudflared supports service tokens by setting environment variables
          # According to documentation: 
          # https://developers.cloudflare.com/cloudflare-one/applications/service-auth/service-tokens/ 
          # and https://developers.cloudflare.com/cloudflare-one/connections/connect-apps/routing-to-tunnel/ssh/#connect-through-cloudflare-access

          # Generate a short-lived certificate for SSH
          cloudflared access ssh --hostname $TUNNEL_HOSTNAME > ssh_config
          # ssh_config now contains ProxyCommand instructions, similar to:
          # ProxyCommand /usr/local/bin/cloudflared access ssh --token ...
          # We'll use this config to run SSH commands

          # Adjust permissions
          chmod 600 ssh_config

      - name: Deploy command over SSH
        # This uses the ssh_config generated by cloudflared.
        # It tells ssh to use the ProxyCommand through cloudflared.
        run: |
          ssh -F ssh_config deploy@ssh.kraig.social "docker service update --force --image ghcr.io/kraigwalker/kraig-social:latest kraigsocial_web || docker stack deploy -c /path/to/docker-stack.yml kraigsocial"
